a[[1]]
a[[2]]
a[[2,]]
a[[2]]
a[[3]]
a[1]
a[[1]]
a[1,]
a[,1]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)
str(inTrain)
inTrain
inTrain
inTrain[[1]]
str(inTrain)
str(inTrain)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4,list=FALSE)
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
knitr::opts_chunk$set(echo = TRUE)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
a<-grep("^IL",names(training))
a
names[a]
names(testing)
names(testing)[[a]]
names(testing)[a]
names(testing)[c(a,1)]
names(testing)[c(1,a)]
training1 = adData[ inTrain,c(1,a)]
testing1 = adData[ -inTrain,c(1,a)]
non_pca_model <- train(diagnosis ~ ., data=training1, method="glm")
non_pca_result<- confusionMatrix(testing1[, 1], predict(non_pca_model, testing1[, -1]))
non_pca_result
preprcs<-preProcess(training1[,-1],method="pca",thresh = 0.8)
trainpca<-predict(preprcs,training1[,-1])
trainpca<-predict(preprcs,training1[,-1])
trainpca<-data.frame(trainpca,training$diagnosis)
pcamodel<-train(training1.diagnosis ~ .,data=trainpca,method="glm")
pcamodel<-train(training.diagnosis ~ .,data=trainpca,method="glm")
preprcs<-preProcess(training1[,-1],method="pca",thresh = 0.8)
preprcs
trainpca<-train(preprcs,training1[,-1])
pca_model <- train(training1.diagnosis ~ ., data=training1, method="glm",preProc = "pca",trControl = trainControl(preProcOptions = list(thresh = 0.8)))
names(training1)
pca_model <- train(training1$diagnosis ~ ., data=training1, method="glm",preProc = "pca",trControl = trainControl(preProcOptions = list(thresh = 0.8)))
pca_model <- train(training1$diagnosis ~ ., data=training1, method="glm",preProc = "pca")
pca_model <- train(diagnosis ~ ., data=training1, method="glm",preProc = "pca")
pca_model <- train(diagnosis ~ ., data=training1, method="glm",preProc = "pca",trControl = trainControl(preProcOptions = list(thresh = 0.8)))
pca_result<- confusionMatrix(testing1[, 1], predict(pca_model, testing1[, -1]))
non_pca_result
pca_result<- confusionMatrix(testing1[, 1], predict(pca_model, testing1))
pca_result
caret
library(caret)
info(caret)
caret
sessionInfo()
library(AppliedPredictiveModeling)
sessionInfo()
data(segmentationOriginal)
names(segmentationOriginal)
knitr::opts_chunk$set(echo = TRUE)
inTrain <- createDataPartition(y=segmentationOriginal$Case,
p=0.75, list=FALSE)
names(inTrain)
dim(inTrain)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.75, list=TRUE)
training <- spam[inTrain,]
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.75, list=TRUE)
training <- segmentationOriginal[inTrain,]
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.75, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
head(training)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.75, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
training
testing
segmentationOriginal$Case
data("segmentationOriginal")
names(segmentationOriginal)
head(segmentationOriginal)
str(segmentationOriginal)
training <- segmentationOriginal[segmentationOriginal$Case="Train",]
training <- segmentationOriginal[segmentationOriginal$Case=="Train",]
dim(training)
dim(segmentationOriginal)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
names(olive)
head(olive)
str(olive)
summary(olive)
newdata = as.data.frame(t(colMeans(olive)))
newdata
predict(modelfit,newdata)
knitr::opts_chunk$set(echo = TRUE)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
names(testSA)
library(ElemStatLearn)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
names(vowel.train)
str(vowel.test)
vowel.test$y<-as.factor(vowel.test$y)
str(vowel.test)
library(ElemStatLearn)
library(ElemStatLearn)
library(caret)
data(vowel.train)
data(vowel.test)
vowel.test$y<-as.factor(vowel.test$y)
vowel.train$y<-as.factor(vowel.train$y)
set.seed(33833)
modelfit<-train(y~.,data=vowel.train,method="rf")
varImp(modelfit)
knitr::opts_chunk$set(echo = TRUE)
library(parallel)
library(doParallel)
cluster <- makeCluster(detectCores() - 1) # convention to leave 1 core for OS
registerDoParallel(cluster)
traindat = read.csv("D://Users/Gerjan/R/prctcl-mchn-lrnng/pml-training.csv")
valdat = read.csv("D://Users/Gerjan/R/prctcl-mchn-lrnng/pml-testing.csv")
valdat1<-valdat[, colSums(is.na(valdat)) != nrow(valdat)]
a<-c(names(valdat1),"classe")
traindat1<-traindat[,(names(traindat) %in% a)]
traindat2<-traindat1[,8:60]
traindat3<-traindat[,c(1,8:60)]
library(caret)
#library(dplyr)
inTrain<-createDataPartition(y=traindat3$X,p=0.75,list=FALSE)
training<-traindat2[inTrain,]
#training<-sample_n(training,100)
testing<-traindat2[-inTrain,]
rbind("original dataset" =dim(traindat1),"training set"=dim(training))
trainCtrl <- trainControl(method = "cv", number = 3, savePredictions = TRUE,allowParallel = TRUE)
modfit <- train(classe ~., method = "rf", trControl = trainCtrl, data = training, prox = TRUE)
trainCtrl <- trainControl(method = "cv", number = 3, savePredictions = TRUE,allowParallel = TRUE)
modfit <- train(classe ~., method = "lda", trControl = trainCtrl, data = training, prox = TRUE)
modfit
trainCtrl <- trainControl(method = "cv", number = 5, savePredictions = TRUE,allowParallel = TRUE)
modfit <- train(classe ~., method = "lda", trControl = trainCtrl, data = training, prox = TRUE)
modfit
trainCtrl <- trainControl(method = "cv", number = 5, savePredictions = TRUE,allowParallel = TRUE)
modfit <- train(classe ~., method = "nb", trControl = trainCtrl, data = training, prox = TRUE)
modfit
trainCtrl <- trainControl(method = "cv", number = 5, savePredictions = TRUE,allowParallel = TRUE)
modfit <- train(classe ~., method = "rpart", trControl = trainCtrl, data = training)
modfit
confusionMatrix(testing$classe,predict(modfit,testing))
trainCtrl <- trainControl(method = "cv", number = 5, savePredictions = TRUE,allowParallel = TRUE)
modfit <- train(classe ~., method = "rpart", trControl = trainCtrl, data = training)
confusionMatrix(testing$classe,predict(modfit,testing))
confusionMatrix(testing$classe,predict(modfit,testing))
confusionMatrix(training$classe,predict(modfit,training))
modfit
install.packages("leaflet")
library(leaflet)
my_map<-leaflet() %>% addTiles()
my_map
library(leaflet)
my_map<-leaflet() %>% addTiles() %>% addMarkers(lat=47.9532,lng=15.1301,popup = Gerjan)
my_map
library(leaflet)
my_map<-leaflet() %>% addTiles() %>% addMarkers(lat=39,lng=-76,popup = Gerjan)
my_map
library(leaflet)
my_map<-leaflet() %>% addMarkers(lat=39,lng=-76,popup = Gerjan)
my_map
library(leaflet)
my_map<-leaflet()
library(leaflet)
my_map<-leaflet()
library(leaflet)
my_map<-leaflet() %>% addTiles() %>% addMarkers(lat=39,lng=-76)
my_map
library(leaflet)
my_map<-leaflet() %>% addTiles() %>% addMarkers(lat=47.9532,lng=15.1301)
my_map
mtcars %>% leaflet() %>% addTiles()
mtcars %>% leaflet()
mtcars %>% leaflet() %>% addTiles()
df<-as.data.frame((47,15))
df<-(47,15)
my_map<-leaflet()
my_map<-leaflet()
my_map
library(leaflet)
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=47.9532,lng=15.1301)
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=51+47/60+9532/3600,lng=5+15/60+1301/3600)
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=51+47/60,lng=5+15/60)
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=51+47.9532/60,lng=5+15.1301/60)
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=51+47.9555/60,lng=5+15.1384/60)
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+9065/60),lng=c(5+15.1301/60,5+17.5225/60))
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60))
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60))
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolygons(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60))
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60,dashArray=1))
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60,dashArray=1))
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60))
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c(4,20,2))
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c(0,100 ,25 ,50,75 ,0))
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,100 ,25 ,50,75 ,0"))
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,25,50,75,0"))
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,20,30,40,0"))
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,20,0"))
my_map
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10"))
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10"))
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"))
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 1)
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 3)
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 2)
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 1)
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 1.5)
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 1.5,smoothFactor = 10)
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 1.5,smoothFactor = 10,stroke = FALSE)
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 1.5,smoothFactor = 10,opacity = 10)
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolylines(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 1.5,smoothFactor = 6,opacity = 10)
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolygons(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 1.5,smoothFactor = 6,opacity = 10)
my_map
my_map<-leaflet() %>%
addWMSTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolygons(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 1.5,smoothFactor = 6,opacity = 10)
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolygons(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 1.5,smoothFactor = 6,opacity = 10)
my_map
my_map<-leaflet() %>%
addTiles() %>%
addMarkers(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60)) %>%
addPolygons(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 1.54,smoothFactor = 1opacity = 10)
my_map
df<-data.frame(lat=lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60))
df %>%
leaflet()%>%
addTiles() %>%
addMarkers() %>%
addPolygons(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 1.54,smoothFactor = 1opacity = 10)
df
df<-data.frame(lat=lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60))
df %>%
leaflet()%>%
addTiles() %>%
addMarkers() %>%
addPolygons(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 1.54,smoothFactor = 1,opacity = 10)
df
df %>%
leaflet()%>%
addTiles()
df<-data.frame(lat=lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60))
df %>%
leaflet()%>%
addTiles()
df
df<-data.frame(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60))
df
df %>%
leaflet()%>%
addTiles() %>%
addMarkers() %>%
addPolygons(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 1.54,smoothFactor = 1,opacity = 10)
df
df
df %>%
leaflet()%>%
addTiles() %>%
addMarkers(popup="hello") %>%
addPolygons(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 1.54,smoothFactor = 1,opacity = 10)
df
df %>%
leaflet()%>%
addTiles() %>%
addMarkers(popup=c("I live here","I swim here")) %>%
addPolygons(lat=c(51+47.9532/60,51+48.9065/60),lng=c(5+15.1301/60,5+17.5225/60),dashArray=c("0,10,0"),weight = 1.54,smoothFactor = 1,opacity = 10)
df
knitr::opts_chunk$set(echo = TRUE)
GerjansSwim<-"<a href='https://connect.garmin.com/modern/activity/2923958680?share_unique_id=3'>Gerjan_s swim</a>"
mean()
mean
show
lm
show
colSums
dgamma
library(plotly)
head(mtcars)
head(cars)
cars
head(mtcars)
head(mtcars)
names(mtcars)
summary(mtcars)
mtcars[1
]
head(mtcars)
summary(mtcars)
shiny::runApp('DDP/DDP_wk4/Sport_activities_Gerjan_Maas')
runApp('DDP/DDP_wk4/Sport_activities_Gerjan_Maas')
setwd("D:/Users/Gerjan/R/DDP/DDP_wk4/Sport_activities_Gerjan_Maas")
df <- read.csv("activities")
head(df)
str(df)
setwd("D:/Users/Gerjan/R/DDP/DDP_wk4/Sport_activities_Gerjan_Maas")
df <- read.csv("Activities")
head(df)
str(df)
getwd
getwd()
ls
ls()
getwd()
dir()
setwd("D:/Users/Gerjan/R/DDP/DDP_wk4/Sport_activities_Gerjan_Maas")
df <- read.csv("Activities.csv")
head(df)
str(df)
setwd("D:/Users/Gerjan/R/DDP/DDP_wk4/Sport_activities_Gerjan_Maas")
df <- read.csv("Activities.csv")
head(df)
str(df)
df1<-df[c(1,2,5,7,8,9),]
##subsetting the data:
df1<-df[,c(1,2,5,7,8,9)]
df1
df1<-df[,c(1,2,5,7,8,9,13,14)]
head(df1)
runApp()
runApp()
runApp()
runApp()
runApp()
head(df1)
levels(df1$Activiteittype)
runApp()
runApp()
df1[,1]
df1[1,]
runApp()
runApp()
runApp()
df1[swimming,]
df1[cycling,]
df1[act_type=cycling,]
df1[2,]
df1[,"Activiteittype"="cycling"]
df1[,"Activiteittype"=cycling]
df1[,"Activiteittype"=running]
df1[,"Activiteittype"=running]
df1[,2]
df1[,1]
df1[,1=cycling]
df1[,1="cycling"]
df1[,df[1]="cycling"]
df1[,df[1]=cycling]
df1[,df[1,]="cycling"]
df1[,df[,1]="cycling"]
df[1,]
df[,1]
df[,1]=='cycling'
df[1,]
df1[df[,1]=='cycling',]
runApp()
df1$Activiteittype
levels(df1$Activiteittype)
levels(df1$Activiteittype)[c(1,2,3,4)]
levels(df1$Activiteittype)[c(1,2,3,4,7)]
runApp()
head(df)
runApp()
df2<-df1[df[,1]==input$`act-type`,]
runApp()
runApp()
